{{ business_info.address }}<br>
                        <a href="tel:{{ business_info.phone }}" class="hover:text-blue-400">{{ business_info.phone }}</a><br>
                        <a href="mailto:{{ business_info.email }}" class="hover:text-blue-400">{{ business_info.email }}</a>
                    </address>
                    {% endif %}

                    <!-- Social Media Links -->
                    <div class="flex space-x-4">
                        {% if business_info.facebook_url %}
                        <a href="{{ business_info.facebook_url }}" target="_blank" rel="noopener noreferrer" class="text-gray-400 hover:text-blue-400 transition-colors">
                            <i class="fab fa-facebook-f text-xl" aria-hidden="true"></i>
                            <span class="sr-only">Facebook</span>
                        </a>
                        {% endif %}
                        {% if business_info.instagram_url %}
                        <a href="{{ business_info.instagram_url }}" target="_blank" rel="noopener noreferrer" class="text-gray-400 hover:text-pink-400 transition-colors">
                            <i class="fab fa-instagram text-xl" aria-hidden="true"></i>
                            <span class="sr-only">Instagram</span>
                        </a>
                        {% endif %}
                        {% if business_info.whatsapp %}
                        <a href="https://wa.me/{{ business_info.whatsapp }}" target="_blank" rel="noopener noreferrer" class="text-gray-400 hover:text-green-400 transition-colors">
                            <i class="fab fa-whatsapp text-xl" aria-hidden="true"></i>
                            <span class="sr-only">WhatsApp</span>
                        </a>
                        {% endif %}
                    </div>
                </div>

                <!-- Services -->
                <div>
                    <h3 class="text-lg font-semibold mb-4">Layanan Kami</h3>
                    <ul class="space-y-2 text-sm">
                        {% for category in nav_service_categories %}
                        <li>
                            <a href="{% url 'services:category' category.slug %}"
                               class="text-gray-300 hover:text-white transition-colors">
                                {{ category.name }}
                            </a>
                        </li>
                        {% endfor %}
                        <li>
                            <a href="{% url 'services:list' %}"
                               class="text-blue-400 hover:text-blue-300 font-medium">
                                Lihat Semua Layanan →
                            </a>
                        </li>
                    </ul>
                </div>

                <!-- Quick Links -->
                <div>
                    <h3 class="text-lg font-semibold mb-4">Quick Links</h3>
                    <ul class="space-y-2 text-sm">
                        <li><a href="{% url 'content:about' %}" class="text-gray-300 hover:text-white transition-colors">Tentang Kami</a></li>
                        <li><a href="{% url 'content:faq' %}" class="text-gray-300 hover:text-white transition-colors">FAQ</a></li>
                        <li><a href="{% url 'content:testimonials' %}" class="text-gray-300 hover:text-white transition-colors">Testimonial</a></li>
                        <li><a href="{% url 'content:blog_list' %}" class="text-gray-300 hover:text-white transition-colors">Blog</a></li>
                        <li><a href="{% url 'content:contact' %}" class="text-gray-300 hover:text-white transition-colors">Kontak</a></li>
                        <li><a href="/sitemap.xml" class="text-gray-300 hover:text-white transition-colors">Sitemap</a></li>
                    </ul>
                </div>

                <!-- Customer Portal -->
                <div>
                    <h3 class="text-lg font-semibold mb-4">Customer Portal</h3>
                    {% if user.is_authenticated %}
                    <ul class="space-y-2 text-sm">
                        <li><a href="{% url 'customers:dashboard' %}" class="text-gray-300 hover:text-white transition-colors">Dashboard</a></li>
                        <li><a href="{% url 'customers:orders' %}" class="text-gray-300 hover:text-white transition-colors">Order Saya</a></li>
                        <li><a href="{% url 'customers:loyalty' %}" class="text-gray-300 hover:text-white transition-colors">Program Loyalty</a></li>
                        <li><a href="{% url 'customers:profile' %}" class="text-gray-300 hover:text-white transition-colors">Profile</a></li>
                    </ul>
                    {% else %}
                    <div class="space-y-3">
                        <p class="text-gray-300 text-sm">Bergabung dengan customer portal untuk tracking order dan loyalty points.</p>
                        <div class="space-y-2">
                            <a href="{% url 'customers:register' %}"
                               class="block text-center bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors text-sm">
                                Daftar Sekarang
                            </a>
                            <a href="{% url 'customers:login' %}"
                               class="block text-center border border-gray-600 text-gray-300 px-4 py-2 rounded hover:border-gray-500 hover:text-white transition-colors text-sm">
                                Login
                            </a>
                        </div>
                    </div>
                    {% endif %}
                </div>
            </div>

            <!-- Bottom Footer -->
            <div class="border-t border-gray-700 mt-8 pt-8">
                <div class="flex flex-col md:flex-row justify-between items-center">
                    <div class="text-gray-400 text-sm mb-4 md:mb-0">
                        <p>&copy; {{ "now"|date:"Y" }}
                            {% if business_info %}{{ business_info.business_name }}{% else %}Service Laptop Bandung{% endif %}.
                            All rights reserved.
                        </p>
                    </div>
                    <div class="flex items-center space-x-6 text-sm">
                        <a href="#" class="text-gray-400 hover:text-white transition-colors">Privacy Policy</a>
                        <a href="#" class="text-gray-400 hover:text-white transition-colors">Terms of Service</a>
                        <span class="text-gray-500">Made with ❤️ in Bandung</span>
                    </div>
                </div>
            </div>
        </div>
    </footer>

    <!-- Back to Top Button -->
    <button id="back-to-top"
            class="fixed bottom-4 right-4 bg-blue-600 text-white p-3 rounded-full shadow-lg hover:bg-blue-700 transition-all duration-300 opacity-0 invisible z-40"
            aria-label="Back to top">
        <i class="fas fa-chevron-up" aria-hidden="true"></i>
    </button>

    <!-- Loading Overlay -->
    <div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg p-6 flex items-center space-x-4">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span class="text-gray-700">Loading...</span>
        </div>
    </div>

    <!-- JavaScript -->
    {% load compress %}
    {% compress js %}
    <script src="{% static 'js/main.js' %}"></script>
    {% endcompress %}

    <script>
    // Enhanced JavaScript functionality
    document.addEventListener('DOMContentLoaded', function() {
        // Mobile menu toggle
        const mobileMenuBtn = document.getElementById('mobile-menu-btn');
        const mobileMenu = document.getElementById('mobile-menu');

        if (mobileMenuBtn && mobileMenu) {
            mobileMenuBtn.addEventListener('click', function() {
                const isOpen = !mobileMenu.classList.contains('hidden');
                mobileMenu.classList.toggle('hidden');

                // Update ARIA attribute
                mobileMenuBtn.setAttribute('aria-expanded', !isOpen);

                // Update icon
                const icon = mobileMenuBtn.querySelector('i');
                if (icon) {
                    icon.className = isOpen ? 'fas fa-bars text-xl' : 'fas fa-times text-xl';
                }
            });

            // Close mobile menu when clicking outside
            document.addEventListener('click', function(event) {
                if (!mobileMenuBtn.contains(event.target) && !mobileMenu.contains(event.target)) {
                    mobileMenu.classList.add('hidden');
                    mobileMenuBtn.setAttribute('aria-expanded', 'false');
                    const icon = mobileMenuBtn.querySelector('i');
                    if (icon) icon.className = 'fas fa-bars text-xl';
                }
            });
        }

        // Back to top button
        const backToTopBtn = document.getElementById('back-to-top');
        if (backToTopBtn) {
            window.addEventListener('scroll', function() {
                if (window.pageYOffset > 300) {
                    backToTopBtn.classList.remove('opacity-0', 'invisible');
                    backToTopBtn.classList.add('opacity-100', 'visible');
                } else {
                    backToTopBtn.classList.add('opacity-0', 'invisible');
                    backToTopBtn.classList.remove('opacity-100', 'visible');
                }
            });

            backToTopBtn.addEventListener('click', function() {
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            });
        }

        // Auto-hide alerts after 5 seconds
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            setTimeout(() => {
                alert.style.opacity = '0';
                setTimeout(() => alert.remove(), 300);
            }, 5000);
        });

        // Form validation enhancement
        const forms = document.querySelectorAll('form[data-validate]');
        forms.forEach(form => {
            form.addEventListener('submit', function(e) {
                const requiredFields = form.querySelectorAll('[required]');
                let isValid = true;

                requiredFields.forEach(field => {
                    if (!field.value.trim()) {
                        isValid = false;
                        field.classList.add('border-red-500');

                        // Show error message
                        let errorMsg = field.parentNode.querySelector('.error-message');
                        if (!errorMsg) {
                            errorMsg = document.createElement('div');
                            errorMsg.className = 'error-message text-red-500 text-sm mt-1';
                            field.parentNode.appendChild(errorMsg);
                        }
                        errorMsg.textContent = `${field.getAttribute('data-label') || 'This field'} is required.`;
                    } else {
                        field.classList.remove('border-red-500');
                        const errorMsg = field.parentNode.querySelector('.error-message');
                        if (errorMsg) errorMsg.remove();
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                    // Scroll to first error
                    const firstError = form.querySelector('.border-red-500');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        firstError.focus();
                    }
                }
            });
        });

        // Loading overlay utility
        window.showLoading = function() {
            document.getElementById('loading-overlay').classList.remove('hidden');
        };

        window.hideLoading = function() {
            document.getElementById('loading-overlay').classList.add('hidden');
        };

        // Smooth scroll for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function(e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Image lazy loading for better performance
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src;
                        img.classList.remove('opacity-0');
                        observer.unobserve(img);
                    }
                });
            });

            document.querySelectorAll('img[data-src]').forEach(img => {
                imageObserver.observe(img);
            });
        }

        // Service worker registration for PWA capabilities
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/sw.js')
                .then(registration => console.log('SW registered:', registration))
                .catch(error => console.log('SW registration failed:', error));
        }
    });

    // Global utility functions
    window.utils = {
        // Show toast notification
        showToast: function(message, type = 'info', duration = 3000) {
            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 transition-all duration-300 transform translate-x-full`;

            const colors = {
                success: 'bg-green-500 text-white',
                error: 'bg-red-500 text-white',
                warning: 'bg-yellow-500 text-black',
                info: 'bg-blue-500 text-white'
            };

            toast.className += ` ${colors[type] || colors.info}`;
            toast.innerHTML = `
                <div class="flex items-center">
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-current">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;

            document.body.appendChild(toast);

            setTimeout(() => toast.classList.remove('translate-x-full'), 100);
            setTimeout(() => {
                toast.classList.add('translate-x-full');
                setTimeout(() => toast.remove(), 300);
            }, duration);
        },

        // Format currency
        formatCurrency: function(amount) {
            return new Intl.NumberFormat('id-ID', {
                style: 'currency',
                currency: 'IDR',
                minimumFractionDigits: 0
            }).format(amount);
        },

        // Format date
        formatDate: function(date, locale = 'id-ID') {
            return new Intl.DateTimeFormat(locale, {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            }).format(new Date(date));
        },

        // Debounce function for search
        debounce: function(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    };
    </script>

    <!-- Additional JavaScript -->
    {% block extra_js %}{% endblock %}
</body>
</html>
"""

# 11. Database Configuration and Migrations - Enhanced database setup
"""
# database_setup.py - Enhanced database setup script
#!/usr/bin/env python
import os
import sys
import django
from django.core.management import execute_from_command_line
from django.contrib.auth.models import User
from django.utils import timezone

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'optiontech_web.settings')
django.setup()

def setup_database():
    print("🚀 Setting up enhanced database...")

    # 1. Create and run migrations
    print("1. Creating migrations...")
    execute_from_command_line(['manage.py', 'makemigrations', 'core'])
    execute_from_command_line(['manage.py', 'makemigrations', 'services'])
    execute_from_command_line(['manage.py', 'makemigrations', 'content'])
    execute_from_command_line(['manage.py', 'makemigrations', 'customers'])

    print("2. Running migrations...")
    execute_from_command_line(['manage.py', 'migrate'])

    # 3. Create superuser
    print("3. Creating superuser...")
    if not User.objects.filter(username='admin').exists():
        User.objects.create_superuser(
            username='admin',
            email='admin@servicelaptopmandung.com',
            password='admin123',
            first_name='Admin',
            last_name='System'
        )
        print("   ✅ Superuser created: admin/admin123")
    else:
        print("   ✅ Superuser already exists")

    # 4. Setup initial data
    setup_business_info()
    setup_laptop_brands()
    setup_service_categories()
    setup_sample_services()
    setup_loyalty_rewards()
    setup_sample_content()
    setup_faqs()
    setup_testimonials()

    print("\n🎉 Enhanced database setup completed!")
    print("🔑 Admin login: admin/admin123")
    print("🌐 Admin URL: http://127.0.0.1:8000/admin/")
    print("🏠 Website: http://127.0.0.1:8000/")

def setup_business_info():
    from core.models import BusinessInfo

    if not BusinessInfo.objects.exists():
        BusinessInfo.objects.create(
            business_name="OptionTech Service Center",
            address="Jl. Sudirman No. 123, Bandung, Jawa Barat 40123",
            phone="+622212345678",
            email="info@optiontech.id",
            whatsapp="+6281234567890",
            opening_hours={
                "monday": "08:00-20:00",
                "tuesday": "08:00-20:00",
                "wednesday": "08:00-20:00",
                "thursday": "08:00-20:00",
                "friday": "08:00-20:00",
                "saturday": "08:00-18:00",
                "sunday": "Closed"
            },
            description="Service laptop terpercaya di Bandung dengan teknisi berpengalaman dan garansi resmi."
        )
        print("   ✅ Business info created")

def setup_laptop_brands():
    from core.models import LaptopBrand
    from django.utils.text import slugify

    brands = [
        {'name': 'ASUS', 'description': 'Republic of Gamers dan VivoBook Series'},
        {'name': 'Acer', 'description': 'Aspire, Predator, dan Swift Series'},
        {'name': 'HP', 'description': 'Pavilion, EliteBook, dan Omen Series'},
        {'name': 'Dell', 'description': 'Inspiron, XPS, dan Alienware Series'},
        {'name': 'Lenovo', 'description': 'ThinkPad, IdeaPad, dan Legion Series'},
        {'name': 'MSI', 'description': 'Gaming dan Creator Series'},
        {'name': 'Apple', 'description': 'MacBook Air dan MacBook Pro'},
        {'name': 'Toshiba', 'description': 'Satellite dan Portege Series'},
        {'name': 'Sony', 'description': 'VAIO Series'},
        {'name': 'Samsung', 'description': 'Galaxy Book Series'},
    ]

    for brand_data in brands:
        brand, created = LaptopBrand.objects.get_or_create(
            name=brand_data['name'],
            defaults={
                'slug': slugify(brand_data['name']),
                'description': brand_data['description'],
                'is_supported': True,
                'is_featured': brand_data['name'] in ['ASUS', 'Acer', 'HP', 'Dell', 'Lenovo']
            }
        )
        if created:
            print(f"   ✅ Created brand: {brand_data['name']}")

def setup_service_categories():
    from services.models import ServiceCategory
    from django.utils.text import slugify

    categories = [
        {
            'name': 'Hardware Repair',
            'description': 'Perbaikan komponen fisik laptop seperti LCD, keyboard, motherboard',
            'icon': 'fas fa-tools',
            'color_code': '#3B82F6',
            'order': 1,
            'is_featured': True
        },
        {
            'name': 'Software Solutions',
            'description': 'Instalasi OS, software, dan troubleshooting sistem',
            'icon': 'fas fa-laptop-code',
            'color_code': '#10B981',
            'order': 2,
            'is_featured': True
        },
        {
            'name': 'Maintenance & Upgrade',
            'description': 'Perawatan, cleaning, dan upgrade komponen laptop',
            'icon': 'fas fa-cogs',
            'color_code': '#F59E0B',
            'order': 3,
            'is_featured': True
        },
        {
            'name': 'Data Recovery',
            'description': 'Pemulihan data yang hilang atau corrupt',
            'icon': 'fas fa-database',
            'color_code': '#EF4444',
            'order': 4,
            'is_featured': False
        }
    ]

    for cat_data in categories:
        category, created = ServiceCategory.objects.get_or_create(
            name=cat_data['name'],
            defaults={
                'slug': slugify(cat_data['name']),
                **cat_data
            }
        )
        if created:
            print(f"   ✅ Created category: {cat_data['name']}")

def setup_sample_services():
    from services.models import Service, ServiceCategory
    from django.utils.text import slugify

    # Get categories
    hardware = ServiceCategory.objects.get(name='Hardware Repair')
    software = ServiceCategory.objects.get(name='Software Solutions')
    maintenance = ServiceCategory.objects.get(name='Maintenance & Upgrade')

    services_data = [
        # Hardware services
        {
            'name': 'Ganti LCD Laptop',
            'category': hardware,
            'short_description': 'Penggantian layar LCD laptop yang rusak dengan spare part berkualitas tinggi',
            'description': '<p>Layanan penggantian LCD laptop profesional dengan spare part original dan compatible. Melayani semua merk laptop dengan garansi hingga 3 bulan.</p>',
            'price_min': 800000,
            'price_max': 3500000,
            'duration_estimate': '1-2 hari',
            'duration_min_hours': 8,
            'duration_max_hours': 48,
            'icon': 'fas fa-desktop',
            'difficulty_level': 'medium',
            'requires_parts': True,
            'warranty_period_days': 90,
            'is_featured': True,
            'target_keywords': 'ganti lcd laptop bandung, service layar laptop, penggantian lcd laptop'
        },
        {
            'name': 'Service Motherboard',
            'category': hardware,
            'short_description': 'Perbaikan motherboard laptop dengan teknologi modern dan teknisi berpengalaman',
            'description': '<p>Service motherboard laptop dengan diagnostic tools canggih dan micro-soldering expertise. Tangani berbagai kerusakan dari ringan hingga kompleks.</p>',
            'price_min': 500000,
            'price_max': 2000000,
            'duration_estimate': '2-5 hari',
            'duration_min_hours': 48,
            'duration_max_hours': 120,
            'icon': 'fas fa-microchip',
            'difficulty_level': 'expert',
            'requires_parts': True,
            'warranty_period_days': 60,
            'is_featured': True,
            'target_keywords': 'service motherboard laptop, perbaikan motherboard, laptop mati total'
        },

        # Software services
        {
            'name': 'Install Windows 11 Pro',
            'category': software,
            'short_description': 'Instalasi Windows 11 Professional dengan lisensi original dan driver lengkap',
            'description': '<p>Instalasi Windows 11 Pro original dengan aktivasi legal, driver lengkap, dan software essential. Termasuk optimasi performa dan keamanan.</p>',
            'price_min': 150000,
            'price_max': 300000,
            'duration_estimate': '2-4 jam',
            'duration_min_hours': 2,
            'duration_max_hours': 4,
            'icon': 'fab fa-windows',
            'difficulty_level': 'easy',
            'requires_parts': False,
            'warranty_period_days': 30,
            'is_featured': True,
            'target_keywords': 'install windows 11 bandung, instalasi windows 11 pro, install windows original'
        },

        # Maintenance services
        {
            'name': 'Deep Cleaning + Thermal Paste',
            'category': maintenance,
            'short_description': 'Pembersihan menyeluruh dan penggantian thermal paste untuk performa optimal',
            'description': '<p>Layanan deep cleaning komprehensif dengan penggantian thermal paste premium. Atasi masalah overheat dan tingkatkan performa laptop.</p>',
            'price_min': 150000,
            'price_max': 250000,
            'duration_estimate': '2-3 jam',
            'duration_min_hours': 2,
            'duration_max_hours': 3,
            'icon': 'fas fa-broom',
            'difficulty_level': 'medium',
            'requires_parts': True,
            'warranty_period_days': 30,
            'is_featured': True,
            'target_keywords': 'cleaning laptop bandung, thermal paste laptop, service overheat laptop'
        }
    ]

    for service_data in services_data:
        service, created = Service.objects.get_or_create(
            name=service_data['name'],
            defaults={
                'slug': slugify(service_data['name']),
                **service_data
            }
        )
        if created:
            print(f"   ✅ Created service: {service_data['name']}")

def setup_loyalty_rewards():
    from customers.models import LoyaltyReward
    from django.utils.text import slugify

    rewards_data = [
        {
            'name': 'Diskon 10% Service Apapun',
            'description': 'Dapatkan diskon 10% untuk service laptop apapun tanpa minimum pembelian',
            'reward_type': 'DISCOUNT',
            'points_required': 500,
            'discount_percentage': 10.00,
            'minimum_order_value': 0,
            'usage_limit_per_customer': 2,
            'is_featured': True
        },
        {
            'name': 'Potongan Rp 75.000',
            'description': 'Potongan langsung Rp 75.000 untuk service dengan minimum order Rp 300.000',
            'reward_type': 'FIXED_AMOUNT',
            'points_required': 750,
            'discount_amount': 75000,
            'minimum_order_value': 300000,
            'usage_limit_per_customer': 1,
            'is_featured': True
        },
        {
            'name': 'Free Cleaning Service',
            'description': 'Layanan cleaning laptop gratis senilai Rp 100.000',
            'reward_type': 'FREE_SERVICE',
            'points_required': 1000,
            'minimum_order_value': 200000,
            'usage_limit_per_customer': 1,
            'is_featured': True
        }
    ]

    for reward_data in rewards_data:
        reward, created = LoyaltyReward.objects.get_or_create(
            name=reward_data['name'],
            defaults={
                'slug': slugify(reward_data['name']),
                **reward_data
            }
        )
        if created:
            print(f"   ✅ Created reward: {reward_data['name']}")

def setup_sample_content():
    from content.models import ContentPage
    from django.contrib.auth.models import User
    from django.utils.text import slugify

    admin_user = User.objects.get(username='admin')

    content_data = [
        {
            'title': 'Tips Merawat Laptop Agar Awet dan Tahan Lama',
            'page_type': 'blog',
            'excerpt': 'Panduan lengkap merawat laptop agar performa tetap optimal dan umur lebih panjang',
            'content': '''
                <h2>Pentingnya Merawat Laptop</h2>
                <p>Laptop adalah investasi yang tidak murah, oleh karena itu penting untuk merawatnya dengan baik agar dapat digunakan dalam jangka waktu yang lama.</p>

                <h3>1. Bersihkan Secara Rutin</h3>
                <p>Bersihkan layar, keyboard, dan ventilasi udara secara berkala untuk mencegah penumpukan debu.</p>

                <h3>2. Jaga Suhu Laptop</h3>
                <p>Hindari penggunaan laptop di tempat yang panas dan pastikan ventilasi tidak tertutup.</p>

                <h3>3. Update Software</h3>
                <p>Selalu update OS dan antivirus untuk menjaga keamanan dan performa.</p>
            ''',
            'status': 'published',
            'is_featured': True,
            'target_keyword': 'tips merawat laptop',
            'meta_description': 'Tips lengkap merawat laptop agar awet dan tahan lama. Panduan dari teknisi profesional service laptop Bandung.'
        },
        {
            'title': 'Cara Mengatasi Laptop Overheat',
            'page_type': 'blog',
            'excerpt': 'Solusi praktis mengatasi masalah laptop yang cepat panas dan cara pencegahannya',
            'content': '''
                <h2>Penyebab Laptop Overheat</h    email = models.EmailField(_('Email Address'), unique=True)
    name = models.CharField(_('Name'), max_length=100, blank=True)
    status = models.CharField(
        _('Status'),
        max_length=20,
        choices=SUBSCRIPTION_STATUS,
        default='subscribed'
    )

    # Subscription preferences
    interests = models.JSONField(
        _('Interests'),
        default=list,
        blank=True,
        help_text=_('Topics of interest')
    )

    # Tracking
    subscription_date = models.DateTimeField(_('Subscription Date'), auto_now_add=True)
    unsubscription_date = models.DateTimeField(_('Unsubscription Date'), null=True, blank=True)
    ip_address = models.GenericIPAddressField(_('IP Address'), null=True, blank=True)
    source = models.CharField(_('Source'), max_length=100, blank=True)

    # Customer link
    customer = models.OneToOneField(
        'customers.CustomerProfile',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name=_('Customer Profile')
    )

    class Meta:
        ordering = ['-subscription_date']
        verbose_name = _('Newsletter Subscription')
        verbose_name_plural = _('Newsletter Subscriptions')

    def __str__(self):
        return f"{self.email} - {self.get_status_display()}"

    def unsubscribe(self):
        """Unsubscribe from newsletter."""
        self.status = 'unsubscribed'
        self.unsubscription_date = timezone.now()
        self.save()


class ContentView(TimeStampedModel):
    """Track content views for analytics."""

    content_page = models.ForeignKey(
        ContentPage,
        on_delete=models.CASCADE,
        related_name='views'
    )
    ip_address = models.GenericIPAddressField(_('IP Address'))
    user_agent = models.TextField(_('User Agent'), blank=True)
    referrer = models.URLField(_('Referrer'), blank=True)

    # Session tracking
    session_key = models.CharField(_('Session Key'), max_length=40, blank=True)

    # Time spent
    time_on_page = models.PositiveIntegerField(_('Time on Page (seconds)'), default=0)

    # User information (if logged in)
    customer = models.ForeignKey(
        'customers.CustomerProfile',
        on_delete=models.SET_NULL,
        null=True,
        blank=True
    )

    class Meta:
        verbose_name = _('Content View')
        verbose_name_plural = _('Content Views')
        indexes = [
            models.Index(fields=['content_page', 'created_at']),
            models.Index(fields=['ip_address', 'session_key']),
        ]
"""

# 7. Enhanced Views - services/views.py with better performance and SEO
"""
from django.shortcuts import render, get_object_or_404
from django.views.generic import ListView, DetailView
from django.http import JsonResponse, Http404
from django.core.paginator import Paginator
from django.core.cache import cache
from django.db.models import Q, Avg, Count, Prefetch
from django.utils.decorators import method_decorator
from django.views.decorators.cache import cache_page
from django.views.decorators.vary import vary_on_headers
from meta.views import MetadataMixin
from .models import Service, ServiceCategory, ServiceReview


class ServiceListView(MetadataMixin, ListView):
    \"\"\"Enhanced service list with filtering and caching.\"\"\"
    model = Service
    template_name = 'services/list.html'
    context_object_name = 'services'
    paginate_by = 12

    # SEO Meta
    title = 'Layanan Service Laptop Bandung - Reparasi Semua Merk Terpercaya'
    description = 'Layanan service laptop lengkap di Bandung. Ganti LCD, keyboard, motherboard, dan lainnya. Teknisi berpengalaman, garansi resmi, harga terjangkau.'
    keywords = ['service laptop bandung', 'reparasi laptop bandung', 'layanan laptop bandung', 'teknisi laptop profesional']

    def get_queryset(self):
        \"\"\"Optimized queryset with prefetch and filtering.\"\"\"
        queryset = Service.objects.select_related('category').prefetch_related(
            'related_services',
            Prefetch('reviews', queryset=ServiceReview.objects.filter(is_approved=True))
        ).filter(is_active=True).annotate(
            avg_rating=Avg('reviews__rating'),
            review_count=Count('reviews', filter=Q(reviews__is_approved=True))
        )

        # Category filter
        category_slug = self.request.GET.get('category')
        if category_slug:
            queryset = queryset.filter(category__slug=category_slug)

        # Search filter
        search = self.request.GET.get('search')
        if search:
            queryset = queryset.filter(
                Q(name__icontains=search) |
                Q(description__icontains=search) |
                Q(short_description__icontains=search)
            )

        # Price filter
        price_min = self.request.GET.get('price_min')
        price_max = self.request.GET.get('price_max')
        if price_min:
            queryset = queryset.filter(price_min__gte=price_min)
        if price_max:
            queryset = queryset.filter(price_max__lte=price_max)

        # Sort options
        sort = self.request.GET.get('sort', 'default')
        if sort == 'price_low':
            queryset = queryset.order_by('price_min')
        elif sort == 'price_high':
            queryset = queryset.order_by('-price_max')
        elif sort == 'popular':
            queryset = queryset.order_by('-order_count', '-view_count')
        elif sort == 'rating':
            queryset = queryset.order_by('-avg_rating', '-review_count')
        else:
            queryset = queryset.order_by('display_order', 'name')

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # Cache categories for 1 hour
        categories = cache.get('service_categories')
        if categories is None:
            categories = ServiceCategory.objects.filter(is_active=True).order_by('order')
            cache.set('service_categories', categories, 3600)

        context.update({
            'categories': categories,
            'selected_category': self.request.GET.get('category'),
            'search_query': self.request.GET.get('search'),
            'current_sort': self.request.GET.get('sort', 'default'),
            'price_min': self.request.GET.get('price_min'),
            'price_max': self.request.GET.get('price_max'),
        })

        # Add filtering statistics
        if context['services']:
            context['total_services'] = self.get_queryset().count()
            context['price_range'] = {
                'min': min(s.price_min for s in context['services']),
                'max': max(s.price_max for s in context['services'])
            }

        return context


class ServiceDetailView(MetadataMixin, DetailView):
    \"\"\"Enhanced service detail with analytics and recommendations.\"\"\"
    model = Service
    template_name = 'services/detail.html'
    context_object_name = 'service'

    def get_queryset(self):
        return Service.objects.select_related('category').prefetch_related(
            'related_services__category',
            'reviews__customer',
            'faqs'
        ).filter(is_active=True)

    def get_object(self, queryset=None):
        service = super().get_object(queryset)

        # Increment view count (async in production)
        service.increment_view_count()

        return service

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        service = self.object

        # Related services with intelligent recommendations
        related_services = cache.get(f'related_services_{service.id}')
        if related_services is None:
            related_services = service.get_related_services(limit=4)
            cache.set(f'related_services_{service.id}', related_services, 900)

        # Reviews with pagination
        reviews = ServiceReview.objects.filter(
            service=service,
            is_approved=True
        ).select_related('customer').order_by('-created_at')

        # Review statistics
        review_stats = reviews.aggregate(
            avg_rating=Avg('rating'),
            total_reviews=Count('id'),
            five_star=Count('id', filter=Q(rating=5)),
            four_star=Count('id', filter=Q(rating=4)),
            three_star=Count('id', filter=Q(rating=3)),
            two_star=Count('id', filter=Q(rating=2)),
            one_star=Count('id', filter=Q(rating=1)),
        )

        # FAQ for this service
        faqs = service.faqs.filter(is_active=True).order_by('order')

        # Breadcrumb for SEO
        breadcrumbs = [
            {'name': 'Home', 'url': '/'},
            {'name': 'Layanan', 'url': '/layanan/'},
        ]

        if service.category:
            breadcrumbs.append({
                'name': service.category.name,
                'url': f'/layanan/kategori/{service.category.slug}/'
            })

        breadcrumbs.append({
            'name': service.name,
            'url': service.get_absolute_url()
        })

        context.update({
            'related_services': related_services,
            'reviews': reviews[:5],  # Show first 5 reviews
            'review_stats': review_stats,
            'faqs': faqs,
            'breadcrumbs': breadcrumbs,
            'json_ld_service': self.get_service_structured_data(service),
        })

        return context

    def get_service_structured_data(self, service):
        \"\"\"Generate JSON-LD structured data for service.\"\"\"
        return {
            '@context': 'https://schema.org',
            '@type': 'Service',
            'name': service.name,
            'description': service.short_description,
            'provider': {
                '@type': 'LocalBusiness',
                'name': 'Service Laptop Bandung'
            },
            'areaServed': {
                '@type': 'City',
                'name': 'Bandung'
            },
            'offers': {
                '@type': 'Offer',
                'priceRange': service.get_price_range(),
                'priceCurrency': 'IDR'
            },
            'aggregateRating': self.get_aggregate_rating(service),
            'url': self.request.build_absolute_uri(service.get_absolute_url())
        }

    def get_aggregate_rating(self, service):
        \"\"\"Get aggregate rating for structured data.\"\"\"
        reviews = service.reviews.filter(is_approved=True)
        if reviews.exists():
            avg_rating = reviews.aggregate(avg=Avg('rating'))['avg']
            return {
                '@type': 'AggregateRating',
                'ratingValue': round(avg_rating, 1),
                'reviewCount': reviews.count(),
                'bestRating': 5,
                'worstRating': 1
            }
        return None


@method_decorator(cache_page(60 * 15), name='dispatch')  # Cache for 15 minutes
@method_decorator(vary_on_headers('User-Agent'), name='dispatch')
def service_category_view(request, slug):
    \"\"\"Enhanced category view with caching and analytics.\"\"\"
    category = get_object_or_404(ServiceCategory, slug=slug, is_active=True)

    # Get services in this category
    services = Service.objects.filter(
        category=category,
        is_active=True
    ).select_related('category').annotate(
        avg_rating=Avg('reviews__rating'),
        review_count=Count('reviews', filter=Q(reviews__is_approved=True))
    ).order_by('display_order', 'name')

    # Pagination
    paginator = Paginator(services, 9)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    # Get all categories for navigation
    all_categories = ServiceCategory.objects.filter(is_active=True).order_by('order')

    # Category statistics
    category_stats = {
        'total_services': services.count(),
        'price_range': {
            'min': services.aggregate(min_price=models.Min('price_min'))['min_price'] or 0,
            'max': services.aggregate(max_price=models.Max('price_max'))['max_price'] or 0
        },
        'avg_rating': services.aggregate(avg=Avg('reviews__rating'))['avg'] or 0
    }

    context = {
        'category': category,
        'services': page_obj,
        'all_categories': all_categories,
        'category_stats': category_stats,
        'page_title': f'Layanan {category.name} - Service Laptop Bandung Terpercaya',
        'meta_description': f'Layanan {category.name} terpercaya di Bandung. {category.description or "Teknisi berpengalaman dengan peralatan modern."}'
    }

    return render(request, 'services/category.html', context)


def ajax_service_search(request):
    \"\"\"AJAX endpoint for service search suggestions.\"\"\"
    query = request.GET.get('q', '').strip()

    if len(query) < 2:
        return JsonResponse({'results': []})

    # Search in services
    services = Service.objects.filter(
        Q(name__icontains=query) | Q(short_description__icontains=query),
        is_active=True
    ).values('name', 'slug', 'price_min', 'price_max')[:10]

    results = []
    for service in services:
        results.append({
            'name': service['name'],
            'url': f'/layanan/{service["slug"]}/',
            'price_range': f\"Rp {service['price_min']:,.0f} - {service['price_max']:,.0f}\"
        })

    return JsonResponse({'results': results})


def ajax_price_filter(request):
    \"\"\"AJAX endpoint for price filtering.\"\"\"
    category_slug = request.GET.get('category')

    queryset = Service.objects.filter(is_active=True)
    if category_slug:
        queryset = queryset.filter(category__slug=category_slug)

    price_stats = queryset.aggregate(
        min_price=models.Min('price_min'),
        max_price=models.Max('price_max'),
        avg_price=Avg('price_min')
    )

    return JsonResponse({
        'min_price': price_stats['min_price'] or 0,
        'max_price': price_stats['max_price'] or 0,
        'avg_price': price_stats['avg_price'] or 0
    })
\"\"\"

# 8. Enhanced Admin - services/admin.py with better interface
\"\"\"
from django.contrib import admin
from django.utils.html import format_html
from django.db.models import Avg, Count
from django.urls import reverse
from django.utils.safestring import mark_safe
from .models import Service, ServiceCategory, ServiceReview, ServiceFAQ


@admin.register(ServiceCategory)
class ServiceCategoryAdmin(admin.ModelAdmin):
    list_display = [
        'name', 'service_count', 'total_orders', 'order',
        'is_active', 'is_featured', 'created_at'
    ]
    list_filter = ['is_active', 'is_featured', 'created_at']
    list_editable = ['order', 'is_active', 'is_featured']
    search_fields = ['name', 'description']
    prepopulated_fields = {'slug': ('name',)}
    ordering = ['order', 'name']

    fieldsets = (
        ('Basic Information', {
            'fields': ('name', 'slug', 'description', 'icon', 'color_code')
        }),
        ('Display Options', {
            'fields': ('order', 'is_active', 'is_featured')
        }),
        ('SEO', {
            'fields': ('meta_title', 'meta_description', 'meta_keywords'),
            'classes': ('collapse',)
        }),
    )

    def get_queryset(self, request):
        return super().get_queryset(request).annotate(
            service_count=Count('services'),
            total_orders=Count('services__serviceorder')
        )

    def service_count(self, obj):
        return obj.service_count
    service_count.admin_order_field = 'service_count'
    service_count.short_description = 'Services'

    def total_orders(self, obj):
        return obj.total_orders
    total_orders.admin_order_field = 'total_orders'
    total_orders.short_description = 'Total Orders'


class ServiceFAQInline(admin.TabularInline):
    model = ServiceFAQ
    extra = 1
    fields = ['question', 'answer', 'order', 'is_active']


class ServiceReviewInline(admin.TabularInline):
    model = ServiceReview
    extra = 0
    readonly_fields = ['customer_name', 'rating', 'review_text', 'created_at']
    fields = ['customer_name', 'rating', 'review_text', 'is_approved', 'created_at']
    can_delete = False


@admin.register(Service)
class ServiceAdmin(admin.ModelAdmin):
    list_display = [
        'name', 'category', 'price_range_display', 'duration_estimate',
        'avg_rating', 'view_count', 'order_count', 'is_featured', 'is_active'
    ]
    list_filter = [
        'category', 'is_featured', 'is_active', 'difficulty_level',
        'requires_parts', 'has_warranty', 'created_at'
    ]
    search_fields = ['name', 'description', 'short_description', 'target_keywords']
    prepopulated_fields = {'slug': ('name',)}
    list_editable = ['is_featured', 'is_active']
    filter_horizontal = ['related_services']

    fieldsets = (
        ('Basic Information', {
            'fields': ('name', 'slug', 'category', 'short_description')
        }),
        ('Content', {
            'fields': ('description',)
        }),
        ('Pricing & Duration', {
            'fields': (
                ('price_min', 'price_max'),
                'duration_estimate',
                ('duration_min_hours', 'duration_max_hours')
            )
        }),
        ('Service Properties', {
            'fields': (
                'difficulty_level',
                ('requires_parts', 'has_warranty'),
                'warranty_period_days'
            )
        }),
        ('Media', {
            'fields': ('icon', 'featured_image', 'gallery_images')
        }),
        ('Display Options', {
            'fields': (
                ('is_featured', 'is_active', 'is_popular'),
                'display_order'
            )
        }),
        ('SEO', {
            'fields': ('meta_title', 'meta_description', 'target_keywords'),
            'classes': ('collapse',)
        }),
        ('Requirements & Includes', {
            'fields': ('requirements', 'includes'),
            'classes': ('collapse',)
        }),
        ('Related Services', {
            'fields': ('related_services',),
            'classes': ('collapse',)
        }),
    )

    readonly_fields = ['view_count', 'order_count']
    inlines = [ServiceFAQInline, ServiceReviewInline]

    def get_queryset(self, request):
        return super().get_queryset(request).select_related('category').annotate(
            avg_rating=Avg('reviews__rating'),
            review_count=Count('reviews')
        )

    def price_range_display(self, obj):
        return obj.get_price_range()
    price_range_display.short_description = 'Price Range'

    def avg_rating(self, obj):
        if hasattr(obj, 'avg_rating') and obj.avg_rating:
            rating = obj.avg_rating
            stars = '★' * int(rating) + '☆' * (5 - int(rating))
            return format_html(
                '<span title=\"{:.1f}/5.0\">{}</span>',
                rating, stars
            )
        return '-'
    avg_rating.short_description = 'Rating'

    def save_model(self, request, obj, form, change):
        if not obj.meta_title:
            obj.meta_title = f\"{obj.name} - Service Laptop Bandung Terpercaya\"
        if not obj.meta_description:
            obj.meta_description = f\"{obj.short_description} Harga {obj.get_price_range()}. Garansi resmi.\"
        super().save_model(request, obj, form, change)


@admin.register(ServiceReview)
class ServiceReviewAdmin(admin.ModelAdmin):
    list_display = [
        'service', 'customer_name', 'rating_stars', 'is_verified',
        'is_approved', 'created_at'
    ]
    list_filter = [
        'rating', 'is_verified', 'is_approved', 'verified_purchase',
        'service__category', 'created_at'
    ]
    search_fields = ['customer_name', 'customer_email', 'review_text', 'service__name']
    list_editable = ['is_verified', 'is_approved']
    readonly_fields = ['created_at', 'updated_at']

    fieldsets = (
        ('Review Information', {
            'fields': ('service', 'customer_name', 'customer_email', 'rating', 'review_text')
        }),
        ('Verification', {
            'fields': ('is_verified', 'verified_purchase', 'is_approved')
        }),
        ('Moderation', {
            'fields': ('moderated_by',),
            'classes': ('collapse',)
        }),
    )

    def rating_stars(self, obj):
        stars = '★' * obj.rating + '☆' * (5 - obj.rating)
        return format_html('<span style=\"color: gold;\">{}</span>', stars)
    rating_stars.short_description = 'Rating'

    def save_model(self, request, obj, form, change):
        if obj.is_approved and not obj.moderated_by:
            obj.moderated_by = request.user
        super().save_model(request, obj, form, change)


@admin.register(ServiceFAQ)
class ServiceFAQAdmin(admin.ModelAdmin):
    list_display = ['service', 'question_short', 'order', 'is_active', 'view_count']
    list_filter = ['service__category', 'is_active']
    search_fields = ['question', 'answer', 'service__name']
    list_editable = ['order', 'is_active']

    def question_short(self, obj):
        return obj.question[:80] + \"...\" if len(obj.question) > 80 else obj.question
    question_short.short_description = 'Question'
\"\"\"

# 9. Enhanced Forms - customers/forms.py with better validation
\"\"\"
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from django.core.validators import RegexValidator
from django.utils.translation import gettext_lazy as _
from .models import CustomerProfile, ServiceOrder


class EnhancedCustomerRegistrationForm(UserCreationForm):
    \"\"\"Enhanced registration form with comprehensive validation.\"\"\"

    phone_validator = RegexValidator(
        regex=r'^(\+62|62|0)8[1-9][0-9]{6,9}# =============================================================================
# REFACTORED DJANGO LAPTOP SERVICE PROJECT
# =============================================================================

# 1. requirements.txt - Updated with better versions and security
"""
# Core Django
Django==4.2.21
djangorestframework==3.16.0

# Database
psycopg2-binary==2.9.10

# Media and File Handling
Pillow==11.2.1
pilkit==3.0
django-imagekit==5.0.0

# Content Management
django-ckeditor==6.7.2
django-js-asset==2.2.0
django-taggit==6.1.0

# SEO and Meta
django-meta==2.5.0
django-seo==0.3.5
django-sitemaps==2.0.1
django-robots==6.1

# Performance and Compression
django-compressor==4.5.1
django-appconf==1.1.0
rcssmin==1.1.2
rjsmin==1.2.2

# Development Tools
django-extensions==4.1
django-debug-toolbar==5.2.0

# Background Tasks
celery==5.5.2
redis==6.2.0
kombu==5.5.3
billiard==4.2.1
click==8.1.8
click-didyoumean==0.3.1
click-plugins==1.1.1
click-repl==0.3.0
async-timeout==5.0.1
vine==5.1.0

# Utilities
python-decouple==3.8
python-slugify==8.0.4
python-dateutil==2.9.0.post0
pytz==2025.2
six==1.17.0

# Production
whitenoise==6.9.0
lxml==5.4.0

# Text Processing
text-unidecode==1.3
wcwidth==0.2.13

# Type Checking
typing_extensions==4.13.2

# Time Zone
tzdata==2025.2

# Template Processing
amqp==5.3.1
asgiref==3.8.1
prompt_toolkit==3.0.51
sqlparse==0.5.3
"""

# 2. optiontech_web/settings.py - Enhanced settings with security and performance
"""
import os
from pathlib import Path
from decouple import config

# Build paths
BASE_DIR = Path(__file__).resolve().parent.parent

# Security settings
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-in-production')
DEBUG = config('DEBUG', default=True, cast=bool)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')

# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
]

THIRD_PARTY_APPS = [
    'meta',
    'ckeditor',
    'ckeditor_uploader',
    'taggit',
    'compressor',
]

LOCAL_APPS = [
    'core',
    'services',
    'content',
    'customers',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'optiontech_web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.business_info',
                'core.context_processors.navigation_data',
                'core.context_processors.seo_globals',
            ],
        },
    },
]

WSGI_APPLICATION = 'optiontech_web.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE', default='django.db.backends.sqlite3'),
        'NAME': config('DB_NAME', default=BASE_DIR / 'db.sqlite3'),
        'USER': config('DB_USER', default=''),
        'PASSWORD': config('DB_PASSWORD', default=''),
        'HOST': config('DB_HOST', default=''),
        'PORT': config('DB_PORT', default=''),
    }
}

# Cache configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': config('REDIS_URL', default='redis://127.0.0.1:6379/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'laptop_service',
        'TIMEOUT': 300,
    }
}

# Session configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'id'
TIME_ZONE = 'Asia/Jakarta'
USE_I18N = True
USE_TZ = True

# Static and Media files
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Static files storage
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

# Compression
COMPRESS_ENABLED = not DEBUG
COMPRESS_OFFLINE = True
COMPRESS_CSS_FILTERS = ['compressor.filters.css_default.CssAbsoluteFilter', 'compressor.filters.cssmin.rCSSMinFilter']
COMPRESS_JS_FILTERS = ['compressor.filters.jsmin.rJSMinFilter']

# Email Configuration
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = config('EMAIL_HOST', default='')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@servicelaptopmandung.com')

# Security settings
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_REDIRECT_EXEMPT = []
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    X_FRAME_OPTIONS = 'DENY'

# Auth settings
LOGIN_URL = '/customer/login/'
LOGIN_REDIRECT_URL = '/customer/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# CKEditor Configuration
CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline', 'Strike'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent'],
            ['Link', 'Unlink', 'Anchor'],
            ['Image', 'Table', 'HorizontalRule'],
            ['TextColor', 'BGColor'],
            ['Smiley', 'SpecialChar'],
            ['RemoveFormat', 'Source']
        ],
        'height': 400,
        'width': '100%',
        'toolbarCanCollapse': True,
        'forcePasteAsPlainText': True,
    }
}

# Meta SEO Settings
META_SITE_PROTOCOL = 'https' if not DEBUG else 'http'
META_SITE_DOMAIN = config('SITE_DOMAIN', default='optiontech.id')
META_SITE_NAME = 'Service Laptop Bandung Terpercaya'
META_INCLUDE_KEYWORDS = ['service laptop bandung', 'reparasi laptop bandung', 'teknisi laptop profesional']

# Site ID for Django Sites framework
SITE_ID = 1

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'] if DEBUG else ['file'],
        'level': 'INFO',
    },
}

# Default auto field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Performance settings
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB

# Analytics
GOOGLE_ANALYTICS_ID = config('GOOGLE_ANALYTICS_ID', default='')
GOOGLE_SITE_VERIFICATION = config('GOOGLE_SITE_VERIFICATION', default='')
BING_SITE_VERIFICATION = config('BING_SITE_VERIFICATION', default='')
"""

# 3. core/models.py - Enhanced base models with better practices
"""
from django.db import models
from django.core.validators import RegexValidator
from django.core.cache import cache
from django.utils.translation import gettext_lazy as _


class TimeStampedModel(models.Model):
    \"\"\"Abstract base model with automatic timestamp fields.\"\"\"
    created_at = models.DateTimeField(_('Created at'), auto_now_add=True, db_index=True)
    updated_at = models.DateTimeField(_('Updated at'), auto_now=True)

    class Meta:
        abstract = True


class SEOModel(models.Model):
    \"\"\"Abstract model for SEO-related fields.\"\"\"
    meta_title = models.CharField(
        _('Meta Title'),
        max_length=255,
        blank=True,
        help_text=_('SEO title tag (leave empty for auto-generation)')
    )
    meta_description = models.TextField(
        _('Meta Description'),
        blank=True,
        max_length=160,
        help_text=_('SEO meta description (leave empty for auto-generation)')
    )
    meta_keywords = models.CharField(
        _('Meta Keywords'),
        max_length=500,
        blank=True,
        help_text=_('Comma-separated SEO keywords')
    )

    class Meta:
        abstract = True

    def get_meta_title(self):
        \"\"\"Return SEO-optimized title.\"\"\"
        return self.meta_title or str(self)

    def get_meta_description(self):
        \"\"\"Return SEO-optimized description.\"\"\"
        return self.meta_description or f"Information about {str(self)}"


class BusinessInfo(TimeStampedModel):
    \"\"\"Business information singleton model.\"\"\"

    phone_regex = RegexValidator(
        regex=r'^\+?1?\d{9,15}$',
        message=_("Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.")
    )

    business_name = models.CharField(_('Business Name'), max_length=255)
    address = models.TextField(_('Address'))
    phone = models.CharField(_('Phone'), validators=[phone_regex], max_length=17)
    email = models.EmailField(_('Email'))
    whatsapp = models.CharField(_('WhatsApp'), validators=[phone_regex], max_length=17)

    # Business hours
    opening_hours = models.JSONField(
        _('Opening Hours'),
        default=dict,
        blank=True,
        help_text=_('JSON format: {"monday": "08:00-20:00", ...}')
    )

    # Social media
    facebook_url = models.URLField(_('Facebook URL'), blank=True)
    instagram_url = models.URLField(_('Instagram URL'), blank=True)
    twitter_url = models.URLField(_('Twitter URL'), blank=True)

    # SEO
    description = models.TextField(_('Business Description'), blank=True)

    class Meta:
        verbose_name = _("Business Information")
        verbose_name_plural = _("Business Information")

    def __str__(self):
        return self.business_name

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        # Clear cache when business info is updated
        cache.delete('business_info')

    @classmethod
    def get_current(cls):
        \"\"\"Get current business info with caching.\"\"\"
        business_info = cache.get('business_info')
        if business_info is None:
            business_info = cls.objects.first()
            if business_info:
                cache.set('business_info', business_info, 3600)  # Cache for 1 hour
        return business_info


class LaptopBrand(TimeStampedModel):
    \"\"\"Laptop brand model with enhanced features.\"\"\"

    name = models.CharField(_('Brand Name'), max_length=100, unique=True)
    slug = models.SlugField(_('Slug'), unique=True)
    logo = models.ImageField(
        _('Logo'),
        upload_to='brands/',
        blank=True,
        null=True,
        help_text=_('Brand logo image')
    )
    is_supported = models.BooleanField(_('Is Supported'), default=True)
    is_featured = models.BooleanField(_('Is Featured'), default=False)
    description = models.TextField(_('Description'), blank=True)
    website_url = models.URLField(_('Official Website'), blank=True)

    # SEO
    meta_title = models.CharField(_('Meta Title'), max_length=255, blank=True)
    meta_description = models.TextField(_('Meta Description'), blank=True)

    # Statistics
    total_services = models.PositiveIntegerField(_('Total Services'), default=0)

    class Meta:
        ordering = ['name']
        verbose_name = _('Laptop Brand')
        verbose_name_plural = _('Laptop Brands')

    def __str__(self):
        return self.name

    def increment_service_count(self):
        \"\"\"Increment service count for this brand.\"\"\"
        self.total_services += 1
        self.save(update_fields=['total_services'])


class ContactInfo(TimeStampedModel):
    \"\"\"Contact information for different purposes.\"\"\"

    CONTACT_TYPES = (
        ('sales', _('Sales')),
        ('support', _('Support')),
        ('technical', _('Technical')),
        ('emergency', _('Emergency')),
    )

    contact_type = models.CharField(_('Contact Type'), max_length=20, choices=CONTACT_TYPES)
    name = models.CharField(_('Name'), max_length=100)
    phone = models.CharField(_('Phone'), max_length=20)
    email = models.EmailField(_('Email'), blank=True)
    is_active = models.BooleanField(_('Is Active'), default=True)
    is_primary = models.BooleanField(_('Is Primary'), default=False)

    class Meta:
        verbose_name = _('Contact Information')
        verbose_name_plural = _('Contact Information')
        ordering = ['contact_type', 'name']

    def __str__(self):
        return f"{self.get_contact_type_display()} - {self.name}"
"""

# 4. services/models.py - Enhanced service models with better relationships
"""
from django.db import models
from django.urls import reverse
from django.core.validators import MinValueValidator, MaxValueValidator
from django.core.cache import cache
from django.utils.translation import gettext_lazy as _
from django.utils.text import slugify
from ckeditor.fields import RichTextField
from meta.models import ModelMeta
from core.models import TimeStampedModel, SEOModel


class ServiceCategory(TimeStampedModel, SEOModel):
    \"\"\"Service category with enhanced features.\"\"\"

    name = models.CharField(_('Category Name'), max_length=100, unique=True)
    slug = models.SlugField(_('Slug'), unique=True, blank=True)
    description = models.TextField(_('Description'), blank=True)
    icon = models.CharField(
        _('Icon CSS Class'),
        max_length=255,
        blank=True,
        help_text=_('FontAwesome icon class (e.g., fas fa-tools)')
    )
    color_code = models.CharField(
        _('Color Code'),
        max_length=7,
        blank=True,
        help_text=_('Hex color code (e.g., #3B82F6)')
    )

    # Display options
    order = models.PositiveIntegerField(_('Display Order'), default=0)
    is_active = models.BooleanField(_('Is Active'), default=True)
    is_featured = models.BooleanField(_('Is Featured'), default=False)

    # Statistics
    service_count = models.PositiveIntegerField(_('Service Count'), default=0)
    total_orders = models.PositiveIntegerField(_('Total Orders'), default=0)

    class Meta:
        ordering = ['order', 'name']
        verbose_name = _('Service Category')
        verbose_name_plural = _('Service Categories')

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)
        # Update service count
        self.update_service_count()

    def update_service_count(self):
        \"\"\"Update the count of active services in this category.\"\"\"
        self.service_count = self.services.filter(is_active=True).count()
        self.save(update_fields=['service_count'])

    def get_absolute_url(self):
        return reverse('services:category', kwargs={'slug': self.slug})


class Service(TimeStampedModel, SEOModel, ModelMeta):
    \"\"\"Enhanced service model with comprehensive features.\"\"\"

    PRIORITY_CHOICES = (
        ('low', _('Low Priority')),
        ('medium', _('Medium Priority')),
        ('high', _('High Priority')),
        ('urgent', _('Urgent')),
    )

    DIFFICULTY_LEVELS = (
        ('easy', _('Easy')),
        ('medium', _('Medium')),
        ('hard', _('Hard')),
        ('expert', _('Expert')),
    )

    # Basic information
    name = models.CharField(_('Service Name'), max_length=255)
    slug = models.SlugField(_('Slug'), unique=True, blank=True)
    category = models.ForeignKey(
        ServiceCategory,
        on_delete=models.CASCADE,
        related_name='services',
        verbose_name=_('Category')
    )

    # Descriptions
    short_description = models.CharField(
        _('Short Description'),
        max_length=500,
        help_text=_('Brief description for preview (max 500 chars)')
    )
    description = RichTextField(_('Full Description'))

    # Pricing
    price_min = models.DecimalField(
        _('Minimum Price'),
        max_digits=10,
        decimal_places=2,
        validators=[MinValueValidator(0)]
    )
    price_max = models.DecimalField(
        _('Maximum Price'),
        max_digits=10,
        decimal_places=2,
        validators=[MinValueValidator(0)]
    )

    # Time estimates
    duration_estimate = models.CharField(
        _('Duration Estimate'),
        max_length=100,
        help_text=_('e.g., "1-2 days", "2-4 hours"')
    )
    duration_min_hours = models.PositiveIntegerField(
        _('Minimum Duration (hours)'),
        default=1
    )
    duration_max_hours = models.PositiveIntegerField(
        _('Maximum Duration (hours)'),
        default=24
    )

    # Service properties
    difficulty_level = models.CharField(
        _('Difficulty Level'),
        max_length=20,
        choices=DIFFICULTY_LEVELS,
        default='medium'
    )
    requires_parts = models.BooleanField(_('Requires Spare Parts'), default=True)
    has_warranty = models.BooleanField(_('Has Warranty'), default=True)
    warranty_period_days = models.PositiveIntegerField(
        _('Warranty Period (days)'),
        default=30
    )

    # Media
    icon = models.CharField(
        _('Icon CSS Class'),
        max_length=255,
        blank=True,
        help_text=_('FontAwesome icon class')
    )
    featured_image = models.ImageField(
        _('Featured Image'),
        upload_to='services/',
        blank=True,
        null=True
    )
    gallery_images = models.JSONField(
        _('Gallery Images'),
        default=list,
        blank=True,
        help_text=_('List of additional image URLs')
    )

    # Display options
    is_featured = models.BooleanField(_('Is Featured'), default=False)
    is_active = models.BooleanField(_('Is Active'), default=True)
    is_popular = models.BooleanField(_('Is Popular'), default=False)
    display_order = models.PositiveIntegerField(_('Display Order'), default=0)

    # SEO and tracking
    target_keywords = models.CharField(
        _('Target Keywords'),
        max_length=500,
        blank=True,
        help_text=_('Comma-separated keywords for SEO')
    )
    view_count = models.PositiveIntegerField(_('View Count'), default=0)
    order_count = models.PositiveIntegerField(_('Order Count'), default=0)

    # Related services
    related_services = models.ManyToManyField(
        'self',
        blank=True,
        symmetrical=False,
        verbose_name=_('Related Services')
    )

    # Requirements and includes
    requirements = models.JSONField(
        _('Requirements'),
        default=list,
        blank=True,
        help_text=_('List of requirements for this service')
    )
    includes = models.JSONField(
        _('What\'s Included'),
        default=list,
        blank=True,
        help_text=_('List of what\'s included in the service')
    )

    # Django-meta configuration
    _metadata = {
        'title': 'get_meta_title',
        'description': 'get_meta_description',
        'keywords': 'get_meta_keywords',
        'image': 'get_meta_image',
    }

    class Meta:
        ordering = ['display_order', 'name']
        verbose_name = _('Service')
        verbose_name_plural = _('Services')
        indexes = [
            models.Index(fields=['is_active', 'is_featured']),
            models.Index(fields=['category', 'is_active']),
            models.Index(fields=['view_count']),
        ]

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse('services:detail', kwargs={'slug': self.slug})

    def get_price_range(self):
        \"\"\"Format price range for display.\"\"\"
        if self.price_min == self.price_max:
            return f"Rp {self.price_min:,.0f}"
        return f"Rp {self.price_min:,.0f} - {self.price_max:,.0f}"

    def get_average_price(self):
        \"\"\"Calculate average price.\"\"\"
        return (self.price_min + self.price_max) / 2

    def increment_view_count(self):
        \"\"\"Increment view count.\"\"\"
        self.view_count += 1
        self.save(update_fields=['view_count'])

    def increment_order_count(self):
        \"\"\"Increment order count.\"\"\"
        self.order_count += 1
        self.save(update_fields=['order_count'])

    def get_meta_title(self):
        if self.meta_title:
            return self.meta_title
        return f"{self.name} - Service Laptop Bandung Terpercaya"

    def get_meta_description(self):
        if self.meta_description:
            return self.meta_description
        return f"{self.short_description} Harga {self.get_price_range()}. Garansi resmi, teknisi berpengalaman."

    def get_meta_keywords(self):
        keywords = ['service laptop bandung', 'reparasi laptop bandung']
        if self.target_keywords:
            keywords.extend([kw.strip() for kw in self.target_keywords.split(',')])
        keywords.append(self.name.lower())
        return keywords

    def get_meta_image(self):
        if self.featured_image:
            return self.featured_image.url
        return None

    def get_related_services(self, limit=3):
        \"\"\"Get related services with caching.\"\"\"
        cache_key = f'related_services_{self.id}_{limit}'
        related = cache.get(cache_key)

        if related is None:
            # First try explicitly related services
            related = list(self.related_services.filter(is_active=True)[:limit])

            # If not enough, get from same category
            if len(related) < limit:
                category_services = Service.objects.filter(
                    category=self.category,
                    is_active=True
                ).exclude(id=self.id).exclude(id__in=[s.id for s in related])

                needed = limit - len(related)
                related.extend(list(category_services[:needed]))

            cache.set(cache_key, related, 900)  # Cache for 15 minutes

        return related


class ServiceReview(TimeStampedModel):
    \"\"\"Service reviews and ratings.\"\"\"

    service = models.ForeignKey(
        Service,
        on_delete=models.CASCADE,
        related_name='reviews'
    )
    customer_name = models.CharField(_('Customer Name'), max_length=100)
    customer_email = models.EmailField(_('Customer Email'), blank=True)
    rating = models.PositiveIntegerField(
        _('Rating'),
        validators=[MinValueValidator(1), MaxValueValidator(5)]
    )
    review_text = models.TextField(_('Review Text'))

    # Verification
    is_verified = models.BooleanField(_('Is Verified'), default=False)
    verified_purchase = models.BooleanField(_('Verified Purchase'), default=False)

    # Moderation
    is_approved = models.BooleanField(_('Is Approved'), default=False)
    moderated_by = models.ForeignKey(
        'auth.User',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='moderated_reviews'
    )

    class Meta:
        ordering = ['-created_at']
        verbose_name = _('Service Review')
        verbose_name_plural = _('Service Reviews')
        unique_together = ['service', 'customer_email']

    def __str__(self):
        return f"{self.customer_name} - {self.service.name} ({self.rating}/5)"


class ServiceFAQ(TimeStampedModel):
    \"\"\"Frequently asked questions for services.\"\"\"

    service = models.ForeignKey(
        Service,
        on_delete=models.CASCADE,
        related_name='faqs'
    )
    question = models.TextField(_('Question'))
    answer = models.TextField(_('Answer'))
    order = models.PositiveIntegerField(_('Display Order'), default=0)
    is_active = models.BooleanField(_('Is Active'), default=True)

    ,
        message=_('Enter a valid Indonesian phone number.')
    )

    email = forms.EmailField(
        required=True,
        widget=forms.EmailInput(attrs={
            'class': 'form-control',
            'placeholder': 'Enter your email address'
        })
    )
    first_name = forms.CharField(
        max_length=30,
        required=True,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'First name'
        })
    )
    last_name = forms.CharField(
        max_length=30,
        required=True,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Last name'
        })
    )
    phone = forms.CharField(
        max_length=20,
        required=True,
        validators=[phone_validator],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '08xxxxxxxxxx'
        })
    )
    whatsapp = forms.CharField(
        max_length=20,
        required=False,
        validators=[phone_validator],
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '08xxxxxxxxxx (if different from phone)'
        })
    )
    address = forms.CharField(
        required=False,
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'rows': 3,
            'placeholder': 'Complete address for pickup/delivery service'
        })
    )

    # Terms acceptance
    accept_terms = forms.BooleanField(
        required=True,
        label=_('I agree to the Terms and Conditions'),
        error_messages={
            'required': _('You must accept the terms and conditions.')
        }
    )

    # Newsletter subscription
    subscribe_newsletter = forms.BooleanField(
        required=False,
        initial=True,
        label=_('Subscribe to newsletter for updates and promotions')
    )

    class Meta:
        model = User
        fields = ('username', 'email', 'first_name', 'last_name', 'password1', 'password2')
        widgets = {
            'username': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Choose a unique username'
            }),
            'password1': forms.PasswordInput(attrs={
                'class': 'form-control',
                'placeholder': 'Enter password'
            }),
            'password2': forms.PasswordInput(attrs={
                'class': 'form-control',
                'placeholder': 'Confirm password'
            }),
        }

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if User.objects.filter(email=email).exists():
            raise forms.ValidationError(_('A user with this email already exists.'))
        return email

    def clean_phone(self):
        phone = self.cleaned_data.get('phone')
        # Normalize phone number
        if phone.startswith('0'):
            phone = '+62' + phone[1:]
        elif phone.startswith('62'):
            phone = '+' + phone
        return phone

    def clean_whatsapp(self):
        whatsapp = self.cleaned_data.get('whatsapp')
        if whatsapp:
            # Normalize WhatsApp number
            if whatsapp.startswith('0'):
                whatsapp = '+62' + whatsapp[1:]
            elif whatsapp.startswith('62'):
                whatsapp = '+' + whatsapp
        return whatsapp

    def save(self, commit=True):
        user = super().save(commit=False)
        user.email = self.cleaned_data['email']
        user.first_name = self.cleaned_data['first_name']
        user.last_name = self.cleaned_data['last_name']

        if commit:
            user.save()

            # Create customer profile
            CustomerProfile.objects.create(
                user=user,
                phone=self.cleaned_data['phone'],
                whatsapp=self.cleaned_data['whatsapp'] or self.cleaned_data['phone'],
                address=self.cleaned_data['address'],
                email_notifications=True,
                whatsapp_notifications=True,
                promotional_offers=self.cleaned_data['subscribe_newsletter']
            )

            # Subscribe to newsletter if requested
            if self.cleaned_data['subscribe_newsletter']:
                from content.models import Newsletter
                Newsletter.objects.get_or_create(
                    email=user.email,
                    defaults={'name': user.get_full_name()}
                )

        return user


class EnhancedProfileUpdateForm(forms.ModelForm):
    \"\"\"Enhanced profile update form with all customer fields.\"\"\"

    first_name = forms.CharField(max_length=30, required=True)
    last_name = forms.CharField(max_length=30, required=True)
    email = forms.EmailField(required=True)

    class Meta:
        model = CustomerProfile
        fields = [
            'phone', 'whatsapp', 'address', 'city', 'postal_code',
            'birth_date', 'gender', 'avatar', 'email_notifications',
            'whatsapp_notifications', 'promotional_offers',
            'preferred_contact_method'
        ]
        widgets = {
            'address': forms.Textarea(attrs={'rows': 3}),
            'birth_date': forms.DateInput(attrs={'type': 'date'}),
            'avatar': forms.FileInput(attrs={'accept': 'image/*'}),
        }

    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)

        if user:
            self.fields['first_name'].initial = user.first_name
            self.fields['last_name'].initial = user.last_name
            self.fields['email'].initial = user.email

        # Add CSS classes
        for field_name, field in self.fields.items():
            if field_name in ['email_notifications', 'whatsapp_notifications', 'promotional_offers']:
                field.widget.attrs['class'] = 'form-check-input'
            elif field_name == 'avatar':
                field.widget.attrs['class'] = 'form-control-file'
            else:
                field.widget.attrs['class'] = 'form-control'

    def save(self, commit=True):
        profile = super().save(commit=False)

        if commit:
            # Update user fields
            user = profile.user
            user.first_name = self.cleaned_data['first_name']
            user.last_name = self.cleaned_data['last_name']
            user.email = self.cleaned_data['email']
            user.save()

            profile.save()

        return profile


class EnhancedServiceOrderForm(forms.ModelForm):
    """Enhanced service order form with comprehensive validation."""

    # Custom fields for better UX
    urgent_service = forms.BooleanField(
        required=False,
        label=_('This is an urgent service request'),
        help_text=_('Check this if you need express service (additional charges may apply)')
    )

    pickup_delivery = forms.BooleanField(
        required=False,
        label=_('Request pickup & delivery service'),
        help_text=_('We can pick up and deliver your laptop (available in Bandung area)')
    )

    backup_data = forms.BooleanField(
        required=False,
        initial=True,
        label=_('I have backed up my important data'),
        help_text=_('We recommend backing up your data before service')
    )

    class Meta:
        model = ServiceOrder
        fields = [
            'service', 'device_brand', 'device_model', 'device_serial',
            'device_color', 'device_year', 'problem_description',
            'accessories_included', 'priority'
        ]
        widgets = {
            'problem_description': forms.Textarea(attrs={
                'rows': 5,
                'placeholder': 'Please describe the problem in detail. Include when the problem started, error messages, and any recent changes to your laptop.'
            }),
            'device_serial': forms.TextInput(attrs={
                'placeholder': 'Optional - if known'
            }),
            'device_color': forms.TextInput(attrs={
                'placeholder': 'e.g., Black, Silver, Red'
            }),
            'accessories_included': forms.Textarea(attrs={
                'rows': 2,
                'placeholder': 'List any accessories included (charger, mouse, bag, etc.)'
            })
        }

    def __init__(self, *args, **kwargs):
        self.customer = kwargs.pop('customer', None)
        super().__init__(*args, **kwargs)

        # Add CSS classes
        for field_name, field in self.fields.items():
            if isinstance(field.widget, forms.CheckboxInput):
                field.widget.attrs['class'] = 'form-check-input'
            else:
                field.widget.attrs['class'] = 'form-control'

        # Update labels and help texts
        self.fields['service'].label = _('Service Type')
        self.fields['device_brand'].label = _('Laptop Brand')
        self.fields['device_model'].label = _('Laptop Model/Type')
        self.fields['device_serial'].label = _('Serial Number (Optional)')
        self.fields['problem_description'].label = _('Problem Description')
        self.fields['priority'].label = _('Service Priority')

        # Filter only active services
        from services.models import Service
        self.fields['service'].queryset = Service.objects.filter(is_active=True).select_related('category')

        # Dynamic help texts based on priority
        self.fields['priority'].help_text = _(
            'Normal: 3-5 days, Priority: 2-3 days, Express: 1-2 days, Emergency: Same day (if possible)'
        )

    def clean_device_brand(self):
        brand = self.cleaned_data.get('device_brand')
        if brand:
            # Capitalize first letter
            return brand.strip().title()
        return brand

    def clean_device_model(self):
        model = self.cleaned_data.get('device_model')
        if model:
            return model.strip()
        return model

    def clean_problem_description(self):
        description = self.cleaned_data.get('problem_description')
        if len(description.strip()) < 20:
            raise forms.ValidationError(
                _('Please provide more details about the problem (minimum 20 characters).')
            )
        return description.strip()

    def clean(self):
        cleaned_data = super().clean()
        urgent_service = cleaned_data.get('urgent_service')
        priority = cleaned_data.get('priority')

        # Auto-set priority if urgent service is requested
        if urgent_service and priority in ['LOW', 'MEDIUM']:
            cleaned_data['priority'] = 'HIGH'

        return cleaned_data

    def save(self, commit=True):
        order = super().save(commit=False)

        if self.customer:
            order.customer = self.customer

        # Set additional fields based on form data
        if self.cleaned_data.get('pickup_delivery'):
            order.is_pickup_delivery = True
            # Use customer's address if available
            if self.customer and self.customer.address:
                order.pickup_address = self.customer.address
                order.delivery_address = self.customer.address

        # Set estimated cost based on service price range
        service = order.service
        if self.cleaned_data.get('urgent_service') or order.priority == 'HIGH':
            # Add 20% for urgent service
            order.estimated_cost = service.get_average_price() * 1.2
        else:
            order.estimated_cost = service.get_average_price()

        # Set estimated completion based on priority and service duration
        from datetime import timedelta
        from django.utils import timezone

        duration_days = service.duration_max_hours / 24
        if order.priority == 'URGENT':
            duration_days = max(1, duration_days / 2)
        elif order.priority == 'HIGH':
            duration_days = max(1, duration_days * 0.7)
        elif order.priority == 'LOW':
            duration_days = duration_days * 1.2

        order.estimated_completion = timezone.now() + timedelta(days=duration_days)

        if commit:
            order.save()

            # Create initial service update
            from .models import ServiceUpdate
            ServiceUpdate.objects.create(
                order=order,
                update_type='STATUS',
                status='PENDING',
                title='Order Received',
                message=f'Thank you for your order! Your {order.device_brand} {order.device_model} has been received and is waiting for technician confirmation.',
                created_by='System'
            )

        return order


class CustomerAddressForm(forms.ModelForm):
    """Form for managing customer addresses."""

    class Meta:
        model = CustomerAddress
        fields = [
            'address_type', 'name', 'street_address', 'city',
            'postal_code', 'phone', 'notes', 'is_default'
        ]
        widgets = {
            'street_address': forms.Textarea(attrs={'rows': 3}),
            'notes': forms.Textarea(attrs={'rows': 2}),
        }

    def __init__(self, *args, **kwargs):
        self.customer = kwargs.pop('customer', None)
        super().__init__(*args, **kwargs)

        # Add CSS classes
        for field_name, field in self.fields.items():
            if isinstance(field.widget, forms.CheckboxInput):
                field.widget.attrs['class'] = 'form-check-input'
            else:
                field.widget.attrs['class'] = 'form-control'

    def save(self, commit=True):
        address = super().save(commit=False)

        if self.customer:
            address.customer = self.customer

        if commit:
            address.save()

        return address
"""

# 10. Enhanced Templates - Base template with modern design
"""
<!-- templates/base.html - Enhanced version -->
<!DOCTYPE html>
<html lang="id" class="scroll-smooth">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="format-detection" content="telephone=no">

    <!-- SEO Meta Tags -->
    <title>{% block title %}Service Laptop Bandung Terpercaya | Reparasi Laptop Profesional{% endblock %}</title>
    <meta name="description" content="{% block description %}Layanan service laptop terpercaya di Bandung. Teknisi berpengalaman, garansi resmi, harga terjangkau.{% endblock %}">
    <meta name="keywords" content="{% block keywords %}service laptop bandung, reparasi laptop bandung, teknisi laptop bandung{% endblock %}">
    <meta name="author" content="{% if business_info %}{{ business_info.business_name }}{% else %}Service Laptop Bandung{% endif %}">
    <meta name="robots" content="index, follow">
    <link rel="canonical" href="{{ request.build_absolute_uri }}">

    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content="{% block og_title %}{% block title %}{% endblock %}{% endblock %}">
    <meta property="og:description" content="{% block og_description %}{% block description %}{% endblock %}{% endblock %}">
    <meta property="og:type" content="{% block og_type %}website{% endblock %}">
    <meta property="og:url" content="{{ request.build_absolute_uri }}">
    <meta property="og:image" content="{% block og_image %}{% load static %}{{ request.scheme }}://{{ request.get_host }}{% static 'img/og-image.jpg' %}{% endblock %}">
    <meta property="og:site_name" content="Service Laptop Bandung">
    <meta property="og:locale" content="id_ID">

    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="{% block twitter_title %}{% block title %}{% endblock %}{% endblock %}">
    <meta name="twitter:description" content="{% block twitter_description %}{% block description %}{% endblock %}{% endblock %}">
    <meta name="twitter:image" content="{% block twitter_image %}{% block og_image %}{% endblock %}{% endblock %}">

    <!-- Favicon and App Icons -->
    <link rel="icon" type="image/x-icon" href="{% static 'img/favicon.ico' %}">
    <link rel="apple-touch-icon" sizes="180x180" href="{% static 'img/apple-touch-icon.png' %}">
    <link rel="icon" type="image/png" sizes="32x32" href="{% static 'img/favicon-32x32.png' %}">
    <link rel="icon" type="image/png" sizes="16x16" href="{% static 'img/favicon-16x16.png' %}">
    <link rel="manifest" href="{% static 'img/site.webmanifest' %}">
    <meta name="theme-color" content="#3B82F6">

    <!-- DNS Prefetch for Performance -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com">
    <link rel="dns-prefetch" href="//cdnjs.cloudflare.com">
    <link rel="dns-prefetch" href="//www.google-analytics.com">

    <!-- Preload Critical Resources -->
    <link rel="preload" href="{% static 'css/main.css' %}" as="style">
    <link rel="preload" href="{% static 'js/main.js' %}" as="script">

    <!-- CSS -->
    {% load static compress %}
    {% compress css %}
    <link rel="stylesheet" href="{% static 'css/tailwind.css' %}">
    <link rel="stylesheet" href="{% static 'css/custom.css' %}">
    {% endcompress %}

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
          integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
          crossorigin="anonymous" referrerpolicy="no-referrer">

    <!-- Custom CSS -->
    <style>
        :root {
            --primary-color: #3B82F6;
            --secondary-color: #1E40AF;
            --accent-color: #F59E0B;
            --success-color: #10B981;
            --danger-color: #EF4444;
            --warning-color: #F59E0B;
            --info-color: #06B6D4;
            --dark-color: #1F2937;
            --light-color: #F9FAFB;
        }

        .btn-primary {
            @apply bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200;
        }

        .btn-secondary {
            @apply bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200;
        }

        .card {
            @apply bg-white rounded-lg shadow-sm border border-gray-200;
        }

        .form-control {
            @apply w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent;
        }

        .loading {
            @apply opacity-50 pointer-events-none;
        }

        /* Animation classes */
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        .slide-up {
            animation: slideUp 0.5s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
    </style>

    <!-- Schema Markup -->
    {% load schema_tags %}
    {% local_business_schema business_info %}
    {% block extra_schema %}{% endblock %}

    <!-- Google Analytics -->
    {% if settings.GOOGLE_ANALYTICS_ID %}
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id={{ settings.GOOGLE_ANALYTICS_ID }}"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', '{{ settings.GOOGLE_ANALYTICS_ID }}', {
            page_title: '{{ title|default:"Home" }}',
            page_location: '{{ request.build_absolute_uri }}'
        });
    </script>
    {% endif %}

    <!-- Site Verification -->
    {% if settings.GOOGLE_SITE_VERIFICATION %}
    <meta name="google-site-verification" content="{{ settings.GOOGLE_SITE_VERIFICATION }}">
    {% endif %}
    {% if settings.BING_SITE_VERIFICATION %}
    <meta name="msvalidate.01" content="{{ settings.BING_SITE_VERIFICATION }}">
    {% endif %}

    <!-- Additional Head Content -->
    {% block extra_head %}{% endblock %}
</head>

<body class="bg-gray-50 min-h-screen flex flex-col antialiased">
    <!-- Skip to content for accessibility -->
    <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-4 py-2 rounded-md z-50">
        Skip to main content
    </a>

    <!-- Header -->
    <header class="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40" role="banner">
        <!-- Top Bar (Desktop) -->
        {% if business_info %}
        <div class="hidden lg:block bg-blue-600 text-white py-2">
            <div class="container mx-auto px-4">
                <div class="flex justify-between items-center text-sm">
                    <div class="flex items-center space-x-6">
                        <span class="flex items-center">
                            <i class="fas fa-envelope mr-2" aria-hidden="true"></i>
                            <a href="mailto:{{ business_info.email }}" class="hover:text-blue-200">
                                {{ business_info.email }}
                            </a>
                        </span>
                        <span class="flex items-center">
                            <i class="fas fa-clock mr-2" aria-hidden="true"></i>
                            Senin-Sabtu 08:00-20:00
                        </span>
                    </div>
                    <div class="flex items-center space-x-4">
                        <a href="tel:{{ business_info.phone }}"
                           class="flex items-center hover:text-blue-200 transition-colors">
                            <i class="fas fa-phone mr-2" aria-hidden="true"></i>
                            {{ business_info.phone }}
                        </a>
                        <a href="https://wa.me/{{ business_info.whatsapp }}"
                           target="_blank"
                           rel="noopener noreferrer"
                           class="flex items-center hover:text-blue-200 transition-colors">
                            <i class="fab fa-whatsapp mr-2" aria-hidden="true"></i>
                            WhatsApp
                        </a>
                    </div>
                </div>
            </div>
        </div>
        {% endif %}

        <!-- Main Navigation -->
        <nav class="container mx-auto px-4 py-4" role="navigation" aria-label="Main navigation">
            <div class="flex justify-between items-center">
                <!-- Logo -->
                <div class="flex items-center">
                    <a href="{% url 'home' %}" class="text-2xl font-bold text-gray-800 hover:text-blue-600 transition-colors">
                        {% if business_info %}
                            {{ business_info.business_name }}
                        {% else %}
                            Service Laptop Bandung
                        {% endif %}
                    </a>
                </div>

                <!-- Desktop Menu -->
                <div class="hidden lg:flex items-center space-x-8">
                    <a href="{% url 'home' %}"
                       class="text-gray-700 hover:text-blue-600 font-medium transition-colors {% if request.resolver_match.url_name == 'home' %}text-blue-600 border-b-2 border-blue-600{% endif %}">
                        Beranda
                    </a>

                    <!-- Services Dropdown -->
                    <div class="relative group">
                        <button class="text-gray-700 hover:text-blue-600 font-medium transition-colors flex items-center group-hover:text-blue-600">
                            Layanan
                            <i class="fas fa-chevron-down ml-1 text-sm group-hover:rotate-180 transition-transform duration-200" aria-hidden="true"></i>
                        </button>
                        <div class="absolute top-full left-0 mt-2 w-64 bg-white rounded-lg shadow-lg border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
                            <div class="p-4">
                                <a href="{% url 'services:list' %}"
                                   class="block py-2 px-3 text-blue-600 hover:bg-blue-50 rounded font-medium mb-2">
                                    <i class="fas fa-list mr-2" aria-hidden="true"></i>Semua Layanan
                                </a>
                                <hr class="my-2 border-gray-200">
                                {% for category in nav_service_categories %}
                                <a href="{% url 'services:category' category.slug %}"
                                   class="block py-2 px-3 text-gray-700 hover:bg-gray-50 rounded transition-colors">
                                    {% if category.icon %}<i class="{{ category.icon }} mr-2 text-blue-500" aria-hidden="true"></i>{% endif %}
                                    {{ category.name }}
                                </a>
                                {% endfor %}
                            </div>
                        </div>
                    </div>

                    <a href="{% url 'content:blog_list' %}"
                       class="text-gray-700 hover:text-blue-600 font-medium transition-colors">
                        Blog
                    </a>
                    <a href="{% url 'content:faq' %}"
                       class="text-gray-700 hover:text-blue-600 font-medium transition-colors">
                        FAQ
                    </a>
                    <a href="{% url 'content:testimonials' %}"
                       class="text-gray-700 hover:text-blue-600 font-medium transition-colors">
                        Testimonial
                    </a>
                    <a href="{% url 'content:about' %}"
                       class="text-gray-700 hover:text-blue-600 font-medium transition-colors">
                        Tentang Kami
                    </a>
                    <a href="{% url 'content:contact' %}"
                       class="text-gray-700 hover:text-blue-600 font-medium transition-colors">
                        Kontak
                    </a>

                    <!-- User Menu -->
                    {% if user.is_authenticated %}
                    <div class="relative group">
                        <button class="flex items-center space-x-2 text-gray-700 hover:text-blue-600 font-medium transition-colors group-hover:text-blue-600">
                            <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm">
                                {{ user.first_name|first|default:user.username|first|upper }}
                            </div>
                            <span>{{ user.get_full_name|default:user.username|truncatechars:15 }}</span>
                            <i class="fas fa-chevron-down text-sm group-hover:rotate-180 transition-transform duration-200" aria-hidden="true"></i>
                        </button>
                        <div class="absolute top-full right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
                            <div class="p-3">
                                <!-- User Info Header -->
                                <div class="px-3 py-2 border-b border-gray-200 mb-2">
                                    <p class="font-semibold text-gray-900">{{ user.get_full_name|default:user.username }}</p>
                                    <p class="text-xs text-gray-500">{{ user.email }}</p>
                                    {% if user.customerprofile %}
                                    <p class="text-xs text-blue-600 font-medium">{{ user.customerprofile.membership_level }} Member</p>
                                    {% endif %}
                                </div>

                                <!-- Menu Items -->
                                <a href="{% url 'customers:dashboard' %}"
                                   class="flex items-center py-2 px-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 rounded transition-colors">
                                    <i class="fas fa-tachometer-alt mr-3 w-4" aria-hidden="true"></i>Dashboard
                                </a>
                                <a href="{% url 'customers:orders' %}"
                                   class="flex items-center py-2 px-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 rounded transition-colors">
                                    <i class="fas fa-list mr-3 w-4" aria-hidden="true"></i>Order Saya
                                </a>
                                <a href="{% url 'customers:loyalty' %}"
                                   class="flex items-center py-2 px-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 rounded transition-colors">
                                    <i class="fas fa-star mr-3 w-4" aria-hidden="true"></i>Program Loyalty
                                </a>
                                <a href="{% url 'customers:profile' %}"
                                   class="flex items-center py-2 px-3 text-gray-700 hover:bg-blue-50 hover:text-blue-600 rounded transition-colors">
                                    <i class="fas fa-user-edit mr-3 w-4" aria-hidden="true"></i>Profile
                                </a>

                                <hr class="my-2 border-gray-200">

                                <a href="{% url 'customers:logout' %}"
                                   class="flex items-center py-2 px-3 text-red-600 hover:bg-red-50 rounded transition-colors">
                                    <i class="fas fa-sign-out-alt mr-3 w-4" aria-hidden="true"></i>Logout
                                </a>
                            </div>
                        </div>
                    </div>
                    {% else %}
                    <div class="flex items-center space-x-3">
                        <a href="{% url 'customers:login' %}"
                           class="text-gray-700 hover:text-blue-600 font-medium transition-colors">
                            <i class="fas fa-sign-in-alt mr-1" aria-hidden="true"></i>Login
                        </a>
                        <a href="{% url 'customers:register' %}"
                           class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors font-medium shadow-sm">
                            <i class="fas fa-user-plus mr-1" aria-hidden="true"></i>Daftar
                        </a>
                    </div>
                    {% endif %}
                </div>

                <!-- Mobile Menu Button -->
                <button id="mobile-menu-btn"
                        class="lg:hidden text-gray-700 hover:text-blue-600 transition-colors p-2"
                        aria-label="Toggle mobile menu"
                        aria-expanded="false">
                    <i class="fas fa-bars text-xl" aria-hidden="true"></i>
                </button>
            </div>

            <!-- Mobile Menu -->
            <div id="mobile-menu" class="lg:hidden mt-4 pb-4 hidden">
                <div class="space-y-2">
                    <a href="{% url 'home' %}"
                       class="block py-3 px-4 text-gray-700 hover:bg-gray-100 rounded transition-colors">
                        <i class="fas fa-home mr-3 w-5" aria-hidden="true"></i>Beranda
                    </a>

                    <!-- Mobile Services -->
                    <div class="border-t border-gray-200 pt-2 mt-2">
                        <p class="px-4 py-2 text-gray-500 text-sm font-medium uppercase tracking-wide">Layanan</p>
                        <a href="{% url 'services:list' %}"
                           class="block py-2 px-6 text-gray-700 hover:bg-gray-100 rounded transition-colors">
                            <i class="fas fa-list mr-3 w-5" aria-hidden="true"></i>Semua Layanan
                        </a>
                        {% for category in nav_service_categories %}
                        <a href="{% url 'services:category' category.slug %}"
                           class="block py-2 px-6 text-gray-700 hover:bg-gray-100 rounded transition-colors">
                            {% if category.icon %}<i class="{{ category.icon }} mr-3 w-5" aria-hidden="true"></i>{% endif %}
                            {{ category.name }}
                        </a>
                        {% endfor %}
                    </div>

                    <!-- Mobile Other Pages -->
                    <div class="border-t border-gray-200 pt-2 mt-2">
                        <a href="{% url 'content:blog_list' %}"
                           class="block py-3 px-4 text-gray-700 hover:bg-gray-100 rounded transition-colors">
                            <i class="fas fa-blog mr-3 w-5" aria-hidden="true"></i>Blog
                        </a>
                        <!-- Continue with other menu items... -->
                    </div>
                </div>
            </div>
        </nav>
    </header>

    <!-- Main Content -->
    <main id="main-content" class="flex-grow" role="main">
        <!-- Page Header (if needed) -->
        {% block page_header %}{% endblock %}

        <!-- Breadcrumbs -->
        {% block breadcrumbs %}{% endblock %}

        <!-- Main Content Area -->
        <div class="{% block container_class %}container mx-auto px-4 py-8{% endblock %}">
            <!-- Flash Messages -->
            {% if messages %}
            <div class="mb-6">
                {% for message in messages %}
                <div class="alert alert-{{ message.tags }} p-4 mb-4 rounded-lg border fade-in" role="alert">
                    <div class="flex items-center">
                        {% if message.tags == 'success' %}
                            <i class="fas fa-check-circle text-green-600 mr-3" aria-hidden="true"></i>
                        {% elif message.tags == 'error' %}
                            <i class="fas fa-exclamation-circle text-red-600 mr-3" aria-hidden="true"></i>
                        {% elif message.tags == 'warning' %}
                            <i class="fas fa-exclamation-triangle text-yellow-600 mr-3" aria-hidden="true"></i>
                        {% else %}
                            <i class="fas fa-info-circle text-blue-600 mr-3" aria-hidden="true"></i>
                        {% endif %}
                        <span>{{ message }}</span>
                        <button type="button" class="ml-auto text-gray-400 hover:text-gray-600" onclick="this.parentElement.parentElement.remove()">
                            <i class="fas fa-times" aria-hidden="true"></i>
                        </button>
                    </div>
                </div>
                {% endfor %}
            </div>
            {% endif %}

            {% block content %}{% endblock %}
        </div>
    </main>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white mt-auto" role="contentinfo">
        <div class="container mx-auto px-4 py-12">
            <div class="grid md:grid-cols-4 gap-8">
                <!-- Company Info -->
                <div>
                    <h3 class="text-xl font-bold mb-4">
                        {% if business_info %}{{ business_info.business_name }}{% else %}Service Laptop Bandung{% endif %}
                    </h3>
                    {% if business_info %}
                    <address class="text-gray-300 text-sm not-italic mb-4">
                        {{ business_info.address }}<br>
                        # =============================================================================
# REFACTORED DJANGO LAPTOP SERVICE PROJECT
# =============================================================================

# 1. requirements.txt - Updated with better versions and security
"""

"""

# 2. optiontech_web/settings.py - Enhanced settings with security and performance
"""

"""

# 3. core/models.py - Enhanced base models with better practices
"""

"""

# 4. services/models.py - Enhanced service models with better relationships
"""
